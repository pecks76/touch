// Code generated by MockGen. DO NOT EDIT.
// Source: account_persistence.go

// Package mock_account is a generated GoMock package.
package mock_account

import (
	reflect "reflect"
	account "restservice/domain/account"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// InsertAccount mocks base method.
func (m *MockAccountRepository) InsertAccount(wrapperType string, potId, amount int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccount", wrapperType, potId, amount)
	ret0, _ := ret[0].(int)
	return ret0
}

// InsertAccount indicates an expected call of InsertAccount.
func (mr *MockAccountRepositoryMockRecorder) InsertAccount(wrapperType, potId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccount", reflect.TypeOf((*MockAccountRepository)(nil).InsertAccount), wrapperType, potId, amount)
}

// ReadAccount mocks base method.
func (m *MockAccountRepository) ReadAccount(id int) account.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccount", id)
	ret0, _ := ret[0].(account.Account)
	return ret0
}

// ReadAccount indicates an expected call of ReadAccount.
func (mr *MockAccountRepositoryMockRecorder) ReadAccount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccount", reflect.TypeOf((*MockAccountRepository)(nil).ReadAccount), id)
}

// ReadAccountsByPotId mocks base method.
func (m *MockAccountRepository) ReadAccountsByPotId(potId int) []account.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccountsByPotId", potId)
	ret0, _ := ret[0].([]account.Account)
	return ret0
}

// ReadAccountsByPotId indicates an expected call of ReadAccountsByPotId.
func (mr *MockAccountRepositoryMockRecorder) ReadAccountsByPotId(potId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccountsByPotId", reflect.TypeOf((*MockAccountRepository)(nil).ReadAccountsByPotId), potId)
}

// UpdateAccount mocks base method.
func (m *MockAccountRepository) UpdateAccount(id, amount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAccount", id, amount)
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountRepositoryMockRecorder) UpdateAccount(id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountRepository)(nil).UpdateAccount), id, amount)
}
