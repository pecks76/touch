// Code generated by MockGen. DO NOT EDIT.
// Source: pot_persistence.go

// Package mock_account is a generated GoMock package.
package mock_account

import (
	reflect "reflect"
	account "restservice/domain/account"

	gomock "github.com/golang/mock/gomock"
)

// MockPotRepository is a mock of PotRepository interface.
type MockPotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPotRepositoryMockRecorder
}

// MockPotRepositoryMockRecorder is the mock recorder for MockPotRepository.
type MockPotRepositoryMockRecorder struct {
	mock *MockPotRepository
}

// NewMockPotRepository creates a new mock instance.
func NewMockPotRepository(ctrl *gomock.Controller) *MockPotRepository {
	mock := &MockPotRepository{ctrl: ctrl}
	mock.recorder = &MockPotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPotRepository) EXPECT() *MockPotRepositoryMockRecorder {
	return m.recorder
}

// InsertPot mocks base method.
func (m *MockPotRepository) InsertPot(name string, clientId, depositId int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPot", name, clientId, depositId)
	ret0, _ := ret[0].(int)
	return ret0
}

// InsertPot indicates an expected call of InsertPot.
func (mr *MockPotRepositoryMockRecorder) InsertPot(name, clientId, depositId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPot", reflect.TypeOf((*MockPotRepository)(nil).InsertPot), name, clientId, depositId)
}

// ReadPot mocks base method.
func (m *MockPotRepository) ReadPot(id int) account.Pot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPot", id)
	ret0, _ := ret[0].(account.Pot)
	return ret0
}

// ReadPot indicates an expected call of ReadPot.
func (mr *MockPotRepositoryMockRecorder) ReadPot(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPot", reflect.TypeOf((*MockPotRepository)(nil).ReadPot), id)
}

// ReadPotsForDepositId mocks base method.
func (m *MockPotRepository) ReadPotsForDepositId(depositId int) []account.Pot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPotsForDepositId", depositId)
	ret0, _ := ret[0].([]account.Pot)
	return ret0
}

// ReadPotsForDepositId indicates an expected call of ReadPotsForDepositId.
func (mr *MockPotRepositoryMockRecorder) ReadPotsForDepositId(depositId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPotsForDepositId", reflect.TypeOf((*MockPotRepository)(nil).ReadPotsForDepositId), depositId)
}
